Index: gradio_server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import gradio as gr\r\nimport config\r\nimport os\r\nimport shutil\r\nfrom datetime import datetime\r\nimport uuid\r\n\r\nfrom tool import run_tool\r\nfrom src.temp_files import process_test_case_generation\r\n\r\n# Define the Gradio interface\r\nwith gr.Blocks() as demo:\r\n    gr.Markdown(\"## Test Case Generation Tool\")\r\n    gr.Markdown(\"Upload your requirements Excel file, select an LLM model, and generate test cases.\")\r\n\r\n    with gr.Row():\r\n        # File upload component\r\n        file_input = gr.File(\r\n            label=\"Upload Requirements Excel File\",\r\n            file_types=[\".xlsx\", \".xls\"],\r\n            type=\"filepath\"\r\n        )\r\n\r\n        # Dropdown for model selection\r\n        model_dropdown = gr.Dropdown(\r\n            choices=config.AVAILABLE_MODELS,\r\n            value=config.AVAILABLE_MODELS[0],\r\n            label=\"Select LLM Model\",\r\n            elem_id=\"model_dropdown\"\r\n        )\r\n\r\n    # Button to trigger test case generation\r\n    generate_button = gr.Button(\"Generate Test Cases\")\r\n\r\n    # Text box to display messages\r\n    message_box = gr.Textbox(\r\n        label=\"Messages\",\r\n        lines=3,\r\n        interactive=False\r\n    )\r\n\r\n    # Download button for the generated Excel file\r\n    download_output = gr.File(\r\n        label=\"Download Test Cases Excel\"\r\n    )\r\n\r\n    # Define the action when the button is clicked\r\n    generate_button.click(\r\n        fn=process_test_case_generation,\r\n        inputs=[file_input, model_dropdown],\r\n        outputs=[message_box, download_output]\r\n    )\r\n\r\n    # Optional: Add some styling or additional information\r\n    gr.Markdown(\"\"\"\r\n    ---\r\n    **Note:** The uploaded Excel file follows the format of EML. If you encounter any issues, please check the messages above for more details.\r\n    \"\"\")\r\n\r\n# Launch the Gradio interface\r\nif __name__ == \"__main__\":\r\n    # Ensure the temporary sessions directory exists\r\n    os.makedirs(\"temp_sessions\", exist_ok=True)\r\n    demo.launch(share=False, server_name=\"0.0.0.0\", server_port=7860)  # Adjust server settings as needed
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradio_server.py b/gradio_server.py
--- a/gradio_server.py	(revision fb1575bf75f00b0d3041a52f6b0993b25d517990)
+++ b/gradio_server.py	(date 1730795209289)
@@ -1,12 +1,10 @@
 import gradio as gr
 import config
 import os
-import shutil
-from datetime import datetime
-import uuid
 
-from tool import run_tool
 from src.temp_files import process_test_case_generation
+# from playground import message_box_test
+
 
 # Define the Gradio interface
 with gr.Blocks() as demo:
@@ -17,7 +15,7 @@
         # File upload component
         file_input = gr.File(
             label="Upload Requirements Excel File",
-            file_types=[".xlsx", ".xls"],
+            # file_types=[".xlsx", ".xls"],
             type="filepath"
         )
 
@@ -46,6 +44,7 @@
 
     # Define the action when the button is clicked
     generate_button.click(
+        # fn=message_box_test,
         fn=process_test_case_generation,
         inputs=[file_input, model_dropdown],
         outputs=[message_box, download_output]
Index: playground.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport shutil\r\nimport uuid\r\nfrom datetime import datetime\r\nimport config\r\nfrom tool import run_tool\r\n\r\n\r\ndef cleanup_oldest_folder(directory, max_folders=10):\r\n    \"\"\"\r\n    Deletes the oldest folder in the specified directory if the number of folders exceeds max_folders.\r\n\r\n    Args:\r\n        directory (str): The path to the directory containing the folders.\r\n        max_folders (int): The maximum number of folders allowed in the directory.\r\n    \"\"\"\r\n    try:\r\n        # List all folders in the directory\r\n        folders = [os.path.join(directory, folder) for folder in os.listdir(directory) if\r\n                   os.path.isdir(os.path.join(directory, folder))]\r\n\r\n        # Sort folders by creation time\r\n        folders.sort(key=lambda x: os.path.getctime(x))\r\n\r\n        # Delete the oldest folder if the number of folders exceeds max_folders\r\n        if len(folders) > max_folders:\r\n            shutil.rmtree(folders[0])\r\n            print(f\"Deleted oldest folder: {folders[0]}\")\r\n    except Exception as e:\r\n        print(f\"An error occurred during cleanup: {str(e)}\")\r\n\r\n\r\n# Example usage in process_test_case_generation function\r\ndef process_test_case_generation(uploaded_file_path, selected_model):\r\n    try:\r\n        # Ensure the temporary sessions directory exists\r\n        temp_sessions_dir = \"temp_sessions\"\r\n        os.makedirs(temp_sessions_dir, exist_ok=True)\r\n\r\n        # Cleanup the oldest folder if necessary\r\n        cleanup_oldest_folder(temp_sessions_dir, max_folders=10)\r\n\r\n        # Create a unique temporary directory for this session to avoid conflicts\r\n        temp_dir = os.path.join(temp_sessions_dir, str(uuid.uuid4()))\r\n        os.makedirs(temp_dir, exist_ok=True)\r\n\r\n        # Define paths based on the temporary directory\r\n        requirements_excel_path = os.path.join(temp_dir, os.path.basename(uploaded_file_path))\r\n        requirements_json_path = os.path.join(temp_dir, \"requirements.json\")\r\n        test_cases_json_path = os.path.join(temp_dir, \"test_cases.json\")\r\n        test_cases_excel_path = os.path.join(temp_dir, \"test_cases.xlsx\")\r\n\r\n        # Copy the uploaded Excel file to the temporary directory\r\n        shutil.copy(uploaded_file_path, requirements_excel_path)\r\n\r\n        # Update config.py parameters\r\n        config.REQUIREMENTS_EXCEL_PATH = requirements_excel_path\r\n        config.REQUIREMENTS_JSON_PATH = requirements_json_path\r\n        config.TEST_CASES_JSON_PATH = test_cases_json_path\r\n        config.TEST_CASES_EXCEL_PATH = test_cases_excel_path\r\n        config.MODEL_NAME = selected_model\r\n\r\n        # Run the test case generation tool\r\n        # run_tool()\r\n\r\n        # Check if the output file was created successfully\r\n        if os.path.exists(test_cases_excel_path):\r\n            return test_cases_excel_path\r\n        else:\r\n            return \"Error: Test cases Excel file was not created.\", None\r\n\r\n    except Exception as e:\r\n        return f\"An error occurred: {str(e)}\", None\r\n\r\n    finally:\r\n        pass\r\n\r\n\r\nprocess_test_case_generation('data/requirements.xlsx', 'glm4:latest')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/playground.py b/playground.py
--- a/playground.py	(revision fb1575bf75f00b0d3041a52f6b0993b25d517990)
+++ b/playground.py	(date 1730795209330)
@@ -1,79 +1,3 @@
-import os
-import shutil
-import uuid
-from datetime import datetime
-import config
-from tool import run_tool
-
-
-def cleanup_oldest_folder(directory, max_folders=10):
-    """
-    Deletes the oldest folder in the specified directory if the number of folders exceeds max_folders.
-
-    Args:
-        directory (str): The path to the directory containing the folders.
-        max_folders (int): The maximum number of folders allowed in the directory.
-    """
-    try:
-        # List all folders in the directory
-        folders = [os.path.join(directory, folder) for folder in os.listdir(directory) if
-                   os.path.isdir(os.path.join(directory, folder))]
-
-        # Sort folders by creation time
-        folders.sort(key=lambda x: os.path.getctime(x))
-
-        # Delete the oldest folder if the number of folders exceeds max_folders
-        if len(folders) > max_folders:
-            shutil.rmtree(folders[0])
-            print(f"Deleted oldest folder: {folders[0]}")
-    except Exception as e:
-        print(f"An error occurred during cleanup: {str(e)}")
-
-
-# Example usage in process_test_case_generation function
-def process_test_case_generation(uploaded_file_path, selected_model):
-    try:
-        # Ensure the temporary sessions directory exists
-        temp_sessions_dir = "temp_sessions"
-        os.makedirs(temp_sessions_dir, exist_ok=True)
-
-        # Cleanup the oldest folder if necessary
-        cleanup_oldest_folder(temp_sessions_dir, max_folders=10)
-
-        # Create a unique temporary directory for this session to avoid conflicts
-        temp_dir = os.path.join(temp_sessions_dir, str(uuid.uuid4()))
-        os.makedirs(temp_dir, exist_ok=True)
-
-        # Define paths based on the temporary directory
-        requirements_excel_path = os.path.join(temp_dir, os.path.basename(uploaded_file_path))
-        requirements_json_path = os.path.join(temp_dir, "requirements.json")
-        test_cases_json_path = os.path.join(temp_dir, "test_cases.json")
-        test_cases_excel_path = os.path.join(temp_dir, "test_cases.xlsx")
-
-        # Copy the uploaded Excel file to the temporary directory
-        shutil.copy(uploaded_file_path, requirements_excel_path)
-
-        # Update config.py parameters
-        config.REQUIREMENTS_EXCEL_PATH = requirements_excel_path
-        config.REQUIREMENTS_JSON_PATH = requirements_json_path
-        config.TEST_CASES_JSON_PATH = test_cases_json_path
-        config.TEST_CASES_EXCEL_PATH = test_cases_excel_path
-        config.MODEL_NAME = selected_model
-
-        # Run the test case generation tool
-        # run_tool()
-
-        # Check if the output file was created successfully
-        if os.path.exists(test_cases_excel_path):
-            return test_cases_excel_path
-        else:
-            return "Error: Test cases Excel file was not created.", None
-
-    except Exception as e:
-        return f"An error occurred: {str(e)}", None
-
-    finally:
-        pass
-
-
-process_test_case_generation('data/requirements.xlsx', 'glm4:latest')
\ No newline at end of file
+def message_box_test(uploaded_file_path, selected_model, message_box):
+    message_box.update("Processing test case generation...")
+    message_box.update(f"Uploaded file path: {uploaded_file_path}")
\ No newline at end of file
Index: src/temp_files.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport shutil\r\nimport uuid\r\nfrom datetime import datetime\r\nimport config\r\nfrom tool import run_tool\r\n\r\n\r\ndef cleanup_oldest_folder(directory, max_folders=10):\r\n    \"\"\"\r\n    Deletes the oldest folder in the specified directory if the number of folders exceeds max_folders.\r\n\r\n    Args:\r\n        directory (str): The path to the directory containing the folders.\r\n        max_folders (int): The maximum number of folders allowed in the directory.\r\n    \"\"\"\r\n    try:\r\n        # List all folders in the directory\r\n        folders = [os.path.join(directory, folder) for folder in os.listdir(directory) if\r\n                   os.path.isdir(os.path.join(directory, folder))]\r\n\r\n        # Sort folders by creation time\r\n        folders.sort(key=lambda x: os.path.getctime(x))\r\n\r\n        # Delete the oldest folder if the number of folders exceeds max_folders\r\n        if len(folders) > max_folders:\r\n            shutil.rmtree(folders[0])\r\n            print(f\"Deleted oldest folder: {folders[0]}\")\r\n    except Exception as e:\r\n        print(f\"An error occurred during cleanup: {str(e)}\")\r\n\r\n\r\n# Example usage in process_test_case_generation function\r\ndef process_test_case_generation(uploaded_file_path, selected_model):\r\n    try:\r\n        # Ensure the temporary sessions directory exists\r\n        temp_sessions_dir = \"temp_sessions\"\r\n        os.makedirs(temp_sessions_dir, exist_ok=True)\r\n\r\n        # Cleanup the oldest folder if necessary\r\n        cleanup_oldest_folder(temp_sessions_dir, max_folders=10)\r\n\r\n        # Create a unique temporary directory for this session to avoid conflicts\r\n        temp_dir = os.path.join(temp_sessions_dir, str(uuid.uuid4()))\r\n        os.makedirs(temp_dir, exist_ok=True)\r\n\r\n        # Define paths based on the temporary directory\r\n        requirements_excel_path = os.path.join(temp_dir, os.path.basename(uploaded_file_path))\r\n        requirements_json_path = os.path.join(temp_dir, \"requirements.json\")\r\n        test_cases_json_path = os.path.join(temp_dir, \"test_cases.json\")\r\n        test_cases_excel_path = os.path.join(temp_dir, \"test_cases.xlsx\")\r\n\r\n        # Copy the uploaded Excel file to the temporary directory\r\n        shutil.copy(uploaded_file_path, requirements_excel_path)\r\n\r\n        # Update config.py parameters\r\n        config.REQUIREMENTS_EXCEL_PATH = requirements_excel_path\r\n        config.REQUIREMENTS_JSON_PATH = requirements_json_path\r\n        config.TEST_CASES_JSON_PATH = test_cases_json_path\r\n        config.TEST_CASES_EXCEL_PATH = test_cases_excel_path\r\n        config.MODEL_NAME = selected_model\r\n\r\n        # Run the test case generation tool\r\n        # run_tool()\r\n\r\n        # Check if the output file was created successfully\r\n        if os.path.exists(test_cases_excel_path):\r\n            return test_cases_excel_path\r\n        else:\r\n            return \"Error: Test cases Excel file was not created.\", None\r\n\r\n    except Exception as e:\r\n        return f\"An error occurred: {str(e)}\", None\r\n\r\n    finally:\r\n        pass\r\n\r\n
===================================================================
diff --git a/src/temp_files.py b/src/temp_files.py
--- a/src/temp_files.py	(revision fb1575bf75f00b0d3041a52f6b0993b25d517990)
+++ b/src/temp_files.py	(date 1730795209305)
@@ -3,7 +3,6 @@
 import uuid
 from datetime import datetime
 import config
-from tool import run_tool
 
 
 def cleanup_oldest_folder(directory, max_folders=10):
@@ -74,4 +73,3 @@
 
     finally:
         pass
-
Index: playground_mini.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport shutil\r\n\r\n# lsd = os.listdir(\"temp_sessions\")\r\n# shutil.rmtree(\"temp_sessions\\\\\" + lsd[0])\r\n\r\nfolders = [os.path.join(\"temp_sessions\", folder) for folder in os.listdir(\"temp_sessions\") if\r\n                   os.path.isdir(os.path.join(\"temp_sessions\", folder))]\r\n\r\nprint(folders)\r\nprint(type(folders))\r\nprint(folders[0])\r\n\r\nshutil.rmtree(folders[0])
===================================================================
diff --git a/playground_mini.py b/playground_mini.py
--- a/playground_mini.py	(revision fb1575bf75f00b0d3041a52f6b0993b25d517990)
+++ b/playground_mini.py	(date 1730795209317)
@@ -1,14 +1,32 @@
-import os
-import shutil
+import gradio as gr
+import time
+
+def function_with_prints():
+    print("processing started...")
+    yield "processing started..."
+    time.sleep(2)
+
+    print("processing in progress...")
+    yield "processing in progress..."
+    time.sleep(2)
+
+    print("processing completed!")
+    yield "processing completed!"
+
 
-# lsd = os.listdir("temp_sessions")
-# shutil.rmtree("temp_sessions\\" + lsd[0])
+def process_messages(existing_msgs):
+    message_log = existing_msgs
 
-folders = [os.path.join("temp_sessions", folder) for folder in os.listdir("temp_sessions") if
-                   os.path.isdir(os.path.join("temp_sessions", folder))]
+    for message in function_with_prints():
+        message_log += f"{message}\n"
+        yield message_log
 
-print(folders)
-print(type(folders))
-print(folders[0])
 
-shutil.rmtree(folders[0])
\ No newline at end of file
+with gr.Blocks() as demo:
+    output_box = gr.Textbox(label="Messages", lines=10)
+    message_state = gr.State("")
+    button = gr.Button("Start Processing")
+    button.click(process_messages, inputs=message_state, outputs=[output_box, message_state])
+
+
+demo.launch()
